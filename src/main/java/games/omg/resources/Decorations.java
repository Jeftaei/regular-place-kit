package games.omg.resources;

import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextColor;

/**
 * A class which contains various decorations.
 */
public class Decorations {

  public static final String THIN_HEART = "‚ô•";
  public static final String HOLLOWED_THIN_HEART = "‚ô°";
  public static final String HEART = "‚ù§";
  public static final String STAR = "‚òÖ";
  public static final String HOLLOWED_STAR = "‚òÜ";
  public static final String POINTED_STAR = "‚ú≥";
  public static final String THICK_POINTED_STAR = "‚ú¥";
  public static final String SHARP = "‚ôØ";
  public static final String FLAT = "‚ô≠";
  public static final String EIGHTH_NOTE = "‚ô™";
  public static final String QUARTER_NOTE = "‚ô©";
  public static final String BEAMED_EIGHTH_NOTE = "‚ô´";
  public static final String BEAMED_SIXTEENTH_NOTE = "‚ô¨";
  public static final String SMALL_BULLET_POINT = "‚Ä¢";
  public static final String DIAMOND = "‚óÜ";
  public static final String HOLLOWED_DIAMOND = "‚óá";
  public static final String TALL_DIAMOND = "‚ô¶";
  public static final String HOLLOWED_TALL_DIAMOND = "‚ô¢";
  public static final String SMALL_SQUARE = "‚ñ†";
  public static final String HOLLOWED_SMALL_SQUARE = "‚ñ°";
  public static final String BULLET_POINT = "‚óè";
  public static final String HOLLOWED_BULLET_POINT = "‚óã";
  public static final String CROSSED_CIRCLE = "‚åÄ";
  public static final String X = "‚úï";
  public static final String THICK_X = "‚úñ";
  public static final String CHECK_MARK = "‚úî";
  public static final String BALLOT_BOX = "‚òê";
  public static final String BALLOT_BOX_WITH_X = "‚òí";
  public static final String BALLOT_BOX_WITH_CHECK = "‚òë";
  public static final String RIGHT_DOUBLE_ARROW = "‚áí";
  public static final String RIGHT_ARROW_WITH_UPWARDS_HOOK = "‚û•";
  public static final String RIGHT_ARROW_WITH_DOWNWARDS_HOOK = "‚û¶";
  public static final String RIGHT_ARROW_WITH_DROP_SHADOW = "‚û≠";
  public static final String THIN_RIGHT_ARROW_WITH_DROP_SHADOW = "‚ûØ";
  public static final String CIRCLED_RIGHT_ARROW = "‚û≤";
  public static final String RIGHT_TRIANGLE = "‚ñ∂";
  public static final String LEFT_TRIANGLE = "‚óÄ";
  public static final String SMILEY = "‚òª";
  public static final String SMILE = "‚ò∫";
  public static final String FROWN = "‚òπ";
  public static final String PENCIL = "‚úé";
  public static final String HOUSE = "‚åÇ";
  public static final String TRIGRAM_HEAVEN = "‚ò∞";
  public static final String TRIGRAM_WATER = "‚òµ";
  public static final String SHIELD = "üõ°";
  public static final String BOW_AND_ARROW = "üèπ";
  public static final String THUNDERSTORM = "‚òà";
  public static final String NUMERO = "‚Ññ";
  public static final String CURRENCY_SIGN = "¬§";
  public static final String WATCH = "‚åö";
  public static final String SUN = "‚òÄ";
  public static final String CLOUD = "‚òÅ";
  public static final String AIRPLANE = "‚úà";
  public static final String HOURGLASS = "‚åõ";
  public static final String UMBRELLA = "‚òÇ";
  public static final String SNOWFLAKE = "‚ùÑ";
  public static final String SNOWMAN = "‚òÉ";
  public static final String ENVELOPE = "‚úâ";
  public static final String SKULL = "‚ò†";
  public static final String FLOWER = "‚úø";
  public static final String AXES = "‚ú•";
  public static final String COMET = "‚òÑ";
  public static final String MOON = "‚òΩ";
  public static final String SPARKLE = "‚ùá";
  public static final String THIN_BLOCK = "‚ñå";

  /**
   * A class which maps a number to a die representation of that number.
   * 
   * This only supports numbers 1-6.
   */
  public static class Dice {
    private static final String DICE = "‚öÄ‚öÅ‚öÇ‚öÉ‚öÑ‚öÖ";

    /**
     * Gets the die representation of a number.
     * 
     * If the number is not 1-6, or is a non-number, an empty string is returned.
     * 
     * @param number The number
     * @return The die representation
     */
    public static String get(int number) {
      try {
        return DICE.charAt(number - 1) + "";
      } catch (IndexOutOfBoundsException e) {
        return "";
      }
    }

    /**
     * Gets the dice representations of a string containing a set of numbers, 1-6.
     * 
     * For any number which is not 1-6, or any non-numbers, an empty string is returned for that character.
     * 
     * @param numbers The string of numbers
     * @return The dice representations
     */
    public static String get(String numbers) {
      StringBuilder builder = new StringBuilder();
      for (char number : numbers.toCharArray()) {
        try {
          builder.append(get(Integer.parseInt(number + "")));
        } catch (NumberFormatException e) {
        }
      }
      return builder.toString();
    }
  }

  /**
   * A class which maps letters to their circled versions.
   * 
   * It is case sensitive, and contains both upper and lower case letters.
   */
  public static class CircledLetters {
    private static final String CIRCLED_LETTERS = "‚í∂‚í∑‚í∏‚íπ‚í∫‚íª‚íº‚íΩ‚íæ‚íø‚ìÄ‚ìÅ‚ìÇ‚ìÉ‚ìÑ‚ìÖ‚ìÜ‚ìá‚ìà‚ìâ‚ìä‚ìã‚ìå‚ìç‚ìé‚ìè‚ìê‚ìë‚ìí‚ìì‚ìî‚ìï‚ìñ‚ìó‚ìò‚ìô‚ìö‚ìõ‚ìú‚ìù‚ìû‚ìü‚ì†‚ì°‚ì¢‚ì£‚ì§‚ì•‚ì¶‚ìß‚ì®‚ì©";
    private static final String DIRECTORY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    /**
     * Gets the circled version of a letter.
     * 
     * This is case sensitive and supports both upper and lower case letters.
     * If the letter is not in the alphabet, an empty string is returned.
     * 
     * @param letter The letter
     * @return The circled letter
     */
    public static String get(char letter) {
      try {
        return CIRCLED_LETTERS.charAt(DIRECTORY.indexOf(letter)) + "";
      } catch (IndexOutOfBoundsException e) {
        return "";
      }
    }

    /**
     * Gets the circled versions of a string containing letters.
     * 
     * This is case sensitive and supports both upper and lower case letters.
     * If a letter is not in the alphabet, an empty string is returned for that character.
     * 
     * @param word The string of letters
     * @return The circled letters
     */
    public static String get(String word) {
      StringBuilder builder = new StringBuilder();
      for (char letter : word.toCharArray()) {
        builder.append(get(letter));
      }
      return builder.toString();
    }
  }

  /**
   * A class which maps letters to their small versions.
   */
  public static class SmallLetters {
    private static final String SMALL_LETTERS = "·¥Ä ô·¥Ñ·¥Ö·¥á“ì…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ Äs·¥õ·¥ú·¥†·¥°x è·¥¢";
    private static final String DIRECTORY = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    /**
     * Gets the small version of a letter.
     * 
     * This is case insensitive, and will return a small uppercase letter in any case.
     * If the character is not in the alphabet, it will be returned as itself.
     * 
     * @param letter The letter
     * @return The small letter
     */
    public static String get(char letter) {
      try {
        return SMALL_LETTERS.charAt(DIRECTORY.indexOf((letter + "").toUpperCase())) + "";
      } catch (IndexOutOfBoundsException e) {
        return letter + "";
      }
    }

    /**
     * Gets the small versions of a string containing letters.
     * 
     * This is case insensitive, and will return a small uppercase letter in any case.
     * If a character in the string is not in the alphabet, it is returned as itself.
     * 
     * @param word The string of letters
     * @return The small letters
     */
    public static String get(String word) {
      StringBuilder builder = new StringBuilder();
      for (char letter : word.toCharArray()) {
        builder.append(get(letter));
      }
      return builder.toString();
    }
  }

  /**
   * A class which maps numbers to their circled versions.
   * 
   * It only supports numbers 1-20.
   */
  public static class CircledNumbers {
    private static final String CIRCLED_NUMBERS = "‚ë†‚ë°‚ë¢‚ë£‚ë§‚ë•‚ë¶‚ëß‚ë®‚ë©‚ë™‚ë´‚ë¨‚ë≠‚ëÆ‚ëØ‚ë∞‚ë±‚ë≤‚ë≥";

    /**
     * Gets the circled version of a number.
     * 
     * If the number is not 1-20, or is a non-number, the number is returned as a string.
     * 
     * @param number The number
     * @return The circled number
     */
    public static String get(int number) {
      try {
        return CIRCLED_NUMBERS.charAt(number - 1) + "";
      } catch (IndexOutOfBoundsException e) {
        return number + "";
      }
    }
  }

  /**
   * Creates a system message. Used in older code.
   * 
   * @param color   The color
   * @param prefix  The prefix
   * @param message The message
   * @return The system message
   * 
   * @deprecated Use SystemMessage instead.
   */
  public static Component createSystemMessage(TextColor color, String prefix, Component message) {
    return Component.text()
        .color(NamedTextColor.GRAY)
        .append(Component.text(prefix).color(color))
        .append(Component.space())
        .append(message)
        .build();
  }
}
